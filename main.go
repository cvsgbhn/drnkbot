package main

import (
	"io/ioutil"
	"log"
	"math/rand"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/aws/aws-lambda-go/events"
	"github.com/aws/aws-lambda-go/lambda"

	"github.com/buger/jsonparser"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/joho/godotenv"
)

func init() {
	if err := godotenv.Load(); err != nil {
		log.Print("No .env file found")
	}
}

func main() {
	isLocal := os.Getenv("LOCAL_DRNKBOT_DEVELOPMENT")

	if len(isLocal) == 0 {
		lambda.Start(LambdaHandler)
		return
	}
	RecursiveFetchUpdatesAndRespond()
}

// RecursiveFetchUpdatesAndRespond —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ c–∫–∞–Ω–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–∞
// –ó–∞—Ç–µ–º –æ–Ω–æ –±–µ—Ä–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –Ω–∏—Ö –æ—Ç–≤–µ—Ç
// –°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ –ø—É—Å—Ç–æ–µ —Ç–∞–∫ –∫–∞–∫ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è toast –∏–≤–µ–Ω—Ç
func RecursiveFetchUpdatesAndRespond() {
	drnkbot, err := tgbotapi.NewBotAPI(os.Getenv("TELEGRAM_TOKEN"))
	if err != nil {
		log.Panic(err)
	}

	telegramUpdates := tgbotapi.NewUpdate(0)
	telegramUpdates.Timeout = 60
	updates, _ := drnkbot.GetUpdatesChan(telegramUpdates)

	for update := range updates {
		if update.Message == nil {
			continue
		}
		SendTelegramMessage(update.Message.Chat.ID)
	}
}

// LambdaHandler –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–≤–µ–Ω—Ç–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω–µ –≤ AWS Lambda
// –ë–µ—Ä–µ—Ç json –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º–æ–º, –¥–æ—Å—Ç–∞–µ—Ç –æ—Ç—Ç—É–¥–∞ chatID, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å 200 –¥–ª—è POST –æ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ —Ç–µ–ª–µ–≥—Ä–∞–º–∞, –∏–Ω–∞—á–µ –æ–Ω–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—é—Ç –∏–≤–µ–Ω—Ç
func LambdaHandler(request events.APIGatewayProxyRequest) (*events.APIGatewayProxyResponse, error) {
	chatID, _ := jsonparser.GetInt([]byte(request.Body), "message", "chat", "id")

	SendTelegramMessage(chatID)

	return &events.APIGatewayProxyResponse{StatusCode: 200}, nil
}

// SendTelegramMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ whatthedrink –≤ —á–∞—Ç —Å id –∏–∑ chatID
// –¢–∞–∫ –∂–µ –∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫–Ω–æ–ø–∫–∞ "–•–æ—á—É –ø–æ–ø–∏—Ç—å!" –∏–∑ var keyboard
func SendTelegramMessage(chatID int64) tgbotapi.Message {
	drnkbot, err := tgbotapi.NewBotAPI(os.Getenv("TELEGRAM_TOKEN"))
	if err != nil {
		log.Panic(err)
	}

	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–•–æ—á—É –ø–æ–ø–∏—Ç—å!"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, whatthedrink()+"     ü§ç  –≤ –º—Å–∫ "+getweather())
	msg.ReplyMarkup = keyboard
	message, err := drnkbot.Send(msg)
	if err != nil {
		log.Panic(err)
	}
	return message
}

// whatthedrink –æ—Ç–¥–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—É—é –ø–æ–¥—Å—Ç—Ä–æ–∫—É –∏–∑ —Ç–µ—Ö, —á—Ç–æ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –≤ var opts
func whatthedrink() string {
	opts := strings.Split("—á–π üçµ,–∫—Ñ ‚òï", ",")
	rand.Seed(time.Now().UnixNano())
	return opts[rand.Intn(len(opts))]
}

func getweather() string {
	var bodyString string
	resp, err := http.Get("http://wttr.in/SVO?format=1")
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()

	if resp.StatusCode == http.StatusOK {
		bodyBytes, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			log.Fatal(err)
		}
		bodyString = string(bodyBytes)
	}
	return bodyString
}
